import json
import os
import re
from collections import defaultdict
from typing import List, Dict

# ===================================
# Utility Functions
# ===================================
def normalize_text(text: str) -> str:
    return re.sub(r'[^a-z0-9\s]', '', text.lower())

def segment_text(text: str) -> List[str]:
    return [c.strip() for c in re.split(r'[.!?]', text) if c.strip()]

# ===================================
# Config Loader for JSON files
# ===================================
def load_config():
    base_path = os.path.dirname(__file__)  # adjust for your environment
    with open(os.path.join(base_path, "All_Logic_Rules.json"), "r") as f:
        logic_and_rhetoric = json.load(f)
    with open(os.path.join(base_path, "RazorsAndTraps.json"), "r") as f:
        heuristics = json.load(f)

    config = {
        "logic_rules": logic_and_rhetoric.get("logic_rules", {}),
        "rhetoric_rules": logic_and_rhetoric.get("rhetoric_rules", {}),
        "rhetoric_rules_expanded": logic_and_rhetoric.get("rhetoric_rules_expanded", {}),
        "macro_logic_checks": logic_and_rhetoric.get("macro_logic_checks", {}),
        "razors": heuristics.get("Philosophical_Razors", {}),
        "fallacies": heuristics.get("Mind_Traps", {})
    }
    return config

# ===================================
# REAL Engine: Claim Analysis + Rhetoric + Semantic
# ===================================
class REAL_Engine:
    def __init__(self, logic_rules: Dict, rhetoric_rules_bundle: Dict):
        self.logic_rules = logic_rules
        self.rhetoric_tags_list = rhetoric_rules_bundle.get("tags", [])
        self.classification = rhetoric_rules_bundle.get("classification", {})
        self.anchors = rhetoric_rules_bundle.get("anchors", {})
        self.style_devices = rhetoric_rules_bundle.get("style_devices", {})
        self.advanced_cues = rhetoric_rules_bundle.get("advanced_cues", {})

    def classify_mode_and_purpose(self, claim: str):
        for mode, data in self.classification.items():
            if any(k in claim.lower() for k in data.get("keywords", [])):
                return mode, data.get("purpose")
        return None, None

    def resolve_anchor(self, claim: str):
        for key, val in self.anchors.items():
            if key in claim.lower():
                return val
        return None

    def detect_style_devices(self, claim: str):
        found = []
        for _, devices in self.style_devices.items():
            for device in devices:
                if device in claim.lower():
                    found.append(device)
        return found

    def detect_advanced_cues(self, claim: str):
        cues_found = []
        for cue_type, words in self.advanced_cues.items():
            if any(word in claim.lower() for word in words):
                cues_found.append(cue_type)
        return cues_found

    def expand_interpretations(self, claim: str):
        interpretations = []
        mode, purpose = self.classify_mode_and_purpose(claim)
        anchor = self.resolve_anchor(claim)
        style_found = self.detect_style_devices(claim)

        interpretations.append({
            "meaning": claim.strip(),
            "mode": "logos",
            "purpose": "reasoning",
            "anchor": None,
            "style_devices": []
        })

        if mode:
            interpretations.append({
                "meaning": f"Rhetorical emphasis: {claim.strip()}",
                "mode": mode,
                "purpose": purpose,
                "anchor": anchor,
                "style_devices": style_found
            })

        return interpretations

    def evaluate_claim(self, claim: str) -> Dict:
        passed, failed = [], []

        if re.search(r'\b(is|are|was|were|has|have|do|does|cannot|must)\b', claim.lower()):
            passed.append("Subject-Verb Integrity")
        else:
            failed.append("Subject-Verb Integrity")

        if " and not " in claim.lower():
            failed.append("Law of Non-Contradiction")
        else:
            passed.append("Law of Non-Contradiction")

        if "if" in claim.lower() and "then" in claim.lower():
            passed.append("Conditional Inference")
        else:
            failed.append("Conditional Inference")

        if any(q in claim.lower() for q in ["all", "none", "everybody", "nobody"]):
            passed.append("Quantifier Detected")
        else:
            failed.append("Quantifier Detected")

        if any(m in claim.lower() for m in ["must", "should", "necessary", "possible"]):
            passed.append("Modal Detected")
        else:
            failed.append("Modal Detected")

        interpretations = self.expand_interpretations(claim)

        rhetoric_tags = []
        for tag_rule in self.rhetoric_tags_list:
            if any(keyword in claim.lower() for keyword in tag_rule.get("keywords", [])):
                rhetoric_tags.append(tag_rule["name"])

        advanced_cues_found = self.detect_advanced_cues(claim)
        style_tags = self.detect_style_devices(claim)
        anchor_detected = self.resolve_anchor(claim)
        purpose = self.estimate_rhetorical_purpose(claim)

        primary_mode = "logos"
        secondary_modes = []
        if any(tag in rhetoric_tags for tag in ["credibility", "authority", "reputation", "professionalism"]):
            secondary_modes.append("ethos")
        if any(tag in rhetoric_tags for tag in ["emotion", "injustice", "appeal", "suffering", "urgency"]):
            secondary_modes.append("pathos")

        integrity_flags = []
        if re.search(r"\b(clearly|obviously|undeniably|it is evident|it is clear)\b", claim.lower()):
            integrity_flags.append("Assumed Agreement")
        if re.search(r"\b(likely|may|could|possibly|expected)\b", claim.lower()):
            integrity_flags.append("Speculative Assertion")

        return {
            "core_statement": claim.strip(),
            "logical_checks": {"passed_rules": passed, "failed_rules": failed},
            "rhetorical_strategy": {
                "primary_mode": primary_mode,
                "secondary_modes": secondary_modes,
                "purpose": purpose,
                "devices": style_tags,
                "anchor": anchor_detected,
                "advanced_cues": advanced_cues_found,
                "rhetoric_tags": rhetoric_tags
            },
            "metadata": {"interpretations": interpretations},
            "semantic_flags": integrity_flags
        }

    def estimate_rhetorical_purpose(self, claim: str) -> str:
        if "thank" in claim.lower() or "grateful" in claim.lower():
            return "express gratitude"
        if "justice" in claim.lower() or "freedom" in claim.lower():
            return "invoke moral principle"
        return "inform"

    def process(self, text: str) -> Dict:
        claims = segment_text(text)
        detailed_claims = [self.evaluate_claim(c) for c in claims]

        total_checks = sum(len(c["logical_checks"]["passed_rules"]) + len(c["logical_checks"]["failed_rules"]) for c in detailed_claims)
        passed_checks = sum(len(c["logical_checks"]["passed_rules"]) for c in detailed_claims)
        base_logic_score = round(passed_checks / total_checks, 3) if total_checks else 0.0

        logic_score = min(max(base_logic_score, 0), 1)
        status = "sound" if logic_score >= 0.96 else "uncertain" if logic_score >= 0.71 else "fail"

        return {"claims_analysis": detailed_claims, "logic_score": logic_score, "status": status}

# ===================================
# Razor + Fallacy Analysis
# ===================================
class RazorAnalysis:
    def __init__(self, razor_data: Dict):
        self.razors = razor_data.get("razors", [])

    def analyze(self, text: str) -> Dict:
        normalized_text = normalize_text(text)
        matched = []
        for razor in self.razors:
            keywords = [normalize_text(k) for k in razor.get("keywords", [])]
            if any(re.search(rf'\b{re.escape(k)}\b', normalized_text) for k in keywords):
                matched.append({
                    "razor": razor.get("name", "Unknown"),
                    "description": razor.get("description", ""),
                    "weight": razor.get("weight", 0.01)
                })
        return {"matched_razors": matched}

class FallacyAnalysis:
    def __init__(self, fallacy_data: Dict):
        self.fallacies = fallacy_data.get("traps", [])

    def analyze(self, text: str) -> Dict:
        normalized_text = normalize_text(text)
        detected = []
        for fallacy in self.fallacies:
            keywords = [normalize_text(k) for k in fallacy.get("keywords", [])]
            if any(re.search(rf'\b{re.escape(k)}\b', normalized_text) for k in keywords):
                detected.append({
                    "fallacy": fallacy.get("name", "Unknown"),
                    "description": fallacy.get("description", ""),
                    "priority": fallacy.get("priority", 0)
                })
        return {"detected_fallacies": detected}

# ===================================
# Main Evaluation (FULL STACK)
# ===================================
def evaluate_argument(text: str, config: Dict) -> Dict:
    real_engine = REAL_Engine(config["logic_rules"], config["rhetoric_rules"])
    logic_result = real_engine.process(text)

    razor_analyzer = RazorAnalysis(config["razors"])
    razor_result = razor_analyzer.analyze(text)

    fallacy_analyzer = FallacyAnalysis(config["fallacies"])
    fallacy_result = fallacy_analyzer.analyze(text)

    combined_result = {
        "logic": logic_result,
        "razors": razor_result["matched_razors"],
        "fallacies": fallacy_result["detected_fallacies"],
        "meta": {
            "applied_razors": [r["razor"] for r in razor_result["matched_razors"]],
            "applied_traps": [f["fallacy"] for f in fallacy_result["detected_fallacies"]]
        }
    }

    return combined_result

# ===================================
# Example Usage
# ===================================
if __name__ == "__main__":
    config = load_config()
    text = "If justice fails, then society collapses. We all know this clearly."
    result = evaluate_argument(text, config)

    print("Logic Score:", result["logic"]["logic_score"])
    print("Applied Razors:", result["meta"]["applied_razors"])
    print("Applied Fallacies:", result["meta"]["applied_traps"])
